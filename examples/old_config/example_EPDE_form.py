# -*- coding: utf-8 -*-
"""
Created on Mon May 31 12:33:44 2021

@author: user
"""

import os
import sys


os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

sys.path.pop()
sys.path.append(os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..')))
sys.path.append('../')

from tedeous.config import Config
from tedeous.solver import *

t=np.array([0.     , 0.00025, 0.0005 , 0.00075, 0.001  , 0.00125, 0.0015 ,
       0.00175, 0.002  , 0.00225, 0.0025 , 0.00275, 0.003  , 0.00325,
       0.0035 , 0.00375, 0.004  , 0.00425, 0.0045 , 0.00475, 0.005  ,
       0.00525, 0.0055 , 0.00575, 0.006  , 0.00625, 0.0065 , 0.00675,
       0.007  , 0.00725, 0.0075 , 0.00775, 0.008  ])

coord_list = [t]


operator=[[torch.tensor([[-0.0000],
        [-0.0268],
        [-0.0535],
        [-0.0798],
        [-0.1057],
        [-0.1309],
        [-0.1552],
        [-0.1787],
        [-0.2010],
        [-0.2221],
        [-0.2418],
        [-0.2600],
        [-0.2766],
        [-0.2916],
        [-0.3047],
        [-0.3159],
        [-0.3252],
        [-0.3325],
        [-0.3377],
        [-0.3409],
        [-0.3419],
        [-0.3409],
        [-0.3377],
        [-0.3325],
        [-0.3252],
        [-0.3159],
        [-0.3047],
        [-0.2916],
        [-0.2766],
        [-0.2600],
        [-0.2418],
        [-0.2221],
        [-0.2010]]), [0], 1.0], [torch.tensor([[-2.4059e+00],
        [-2.3985e+00],
        [-2.3763e+00],
        [-2.3394e+00],
        [-2.2881e+00],
        [-2.2228e+00],
        [-2.1437e+00],
        [-2.0514e+00],
        [-1.9464e+00],
        [-1.8295e+00],
        [-1.7012e+00],
        [-1.5625e+00],
        [-1.4142e+00],
        [-1.2571e+00],
        [-1.0923e+00],
        [-9.2070e-01],
        [-7.4346e-01],
        [-5.6165e-01],
        [-3.7637e-01],
        [-1.8876e-01],
        [-1.4732e-16],
        [ 1.8876e-01],
        [ 3.7637e-01],
        [ 5.6165e-01],
        [ 7.4346e-01],
        [ 9.2070e-01],
        [ 1.0923e+00],
        [ 1.2571e+00],
        [ 1.4142e+00],
        [ 1.5625e+00],
        [ 1.7012e+00],
        [ 1.8295e+00],
        [ 1.9464e+00]]), [None], 0], [torch.tensor([[-0.0000],
        [-0.0546],
        [-0.1089],
        [-0.1626],
        [-0.2152],
        [-0.2665],
        [-0.3161],
        [-0.3638],
        [-0.4093],
        [-0.4522],
        [-0.4924],
        [-0.5295],
        [-0.5634],
        [-0.5937],
        [-0.6204],
        [-0.6433],
        [-0.6623],
        [-0.6771],
        [-0.6878],
        [-0.6942],
        [-0.6963],
        [-0.6942],
        [-0.6878],
        [-0.6771],
        [-0.6623],
        [-0.6433],
        [-0.6204],
        [-0.5937],
        [-0.5634],
        [-0.5295],
        [-0.4924],
        [-0.4522],
        [-0.4093]]), [None], 0], [torch.tensor([[0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005],
        [0.0005]]), [0], 2.0], [torch.tensor([[0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896],
        [0.1896]]), [0], 1.0], [torch.tensor([[-1.1661e-01],
        [-1.1625e-01],
        [-1.1517e-01],
        [-1.1338e-01],
        [-1.1090e-01],
        [-1.0773e-01],
        [-1.0390e-01],
        [-9.9423e-02],
        [-9.4337e-02],
        [-8.8668e-02],
        [-8.2453e-02],
        [-7.5730e-02],
        [-6.8540e-02],
        [-6.0927e-02],
        [-5.2938e-02],
        [-4.4623e-02],
        [-3.6033e-02],
        [-2.7221e-02],
        [-1.8241e-02],
        [-9.1488e-03],
        [-7.1401e-18],
        [ 9.1488e-03],
        [ 1.8241e-02],
        [ 2.7221e-02],
        [ 3.6033e-02],
        [ 4.4623e-02],
        [ 5.2938e-02],
        [ 6.0927e-02],
        [ 6.8540e-02],
        [ 7.5730e-02],
        [ 8.2453e-02],
        [ 8.8668e-02],
        [ 9.4337e-02]]), [0], 1.0], [torch.tensor([[2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525],
        [2.7525]]), [None], 0], [torch.tensor([[-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.],
        [-1.]]), [[0], [None]], [1.0, 1.0]]]


bconds= [[torch.tensor([[0.]]), torch.tensor([[0.]])]]



model = torch.nn.Sequential(
    torch.nn.Linear(1, 100),
    torch.nn.Tanh(),
    torch.nn.Linear(100, 100),
    torch.nn.Tanh(),
    torch.nn.Linear(100, 100),
    torch.nn.Tanh(),
    torch.nn.Linear(100, 1)
)


config=Config()

config.set_parameter('Cache.save_always',True)
config.set_parameter('Cache.use_cache',True)

    
model= optimization_solver(coord_list, model, operator, bconds, config,mode='mat')


